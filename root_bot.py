import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import json
import os

from background_tasts import periodic_notify_task_regular, periodic_notify_task_event

TOKEN = "Your token here"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

NOTIFS_PATH = "Your way here"
STOCK_PATH = "Your way here"

class UserStatment(StatesGroup):
    just_started = State()
    waiting_for_what_fruit_to_notify = State()
    waiting_for_what_gear_to_notify = State()
    waiting_for_what_event_item_to_notify = State()
    waiting_for_what_stock_to_get = State()
    waiting_for_what_to_subscribe_fruit_or_gear_or_event = State()

async def clear_user_fruits(user_id: int, filename=NOTIFS_PATH):
    user_id = str(user_id)
    if not os.path.exists(filename):
        return False
    with open(filename, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
        except Exception:
            return False
    changed = False
    for entry in data:
        if entry.get("user_id") == user_id:
            entry["fruits_to_send_dm"] = []
            changed = True
    if changed:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    return changed

async def save_user_subscription(user_id: int, fruit, filename=NOTIFS_PATH):
    user_id = str(user_id)
    data = []
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except Exception:
                data = []
    updated = False
    for entry in data:
        if entry.get("user_id") == user_id:
            if fruit not in entry.get("fruits_to_send_dm", []):
                if not isinstance(entry["fruits_to_send_dm"], list):
                    entry["fruits_to_send_dm"] = [entry["fruits_to_send_dm"]]
                entry["fruits_to_send_dm"].append(fruit)
            updated = True
            break
    if not updated:
        data.append({
            "user_id": user_id,
            "sended_or_not": "False",
            "fruits_to_send_dm": [fruit]
        })
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def get_stock(shop_name):
    try:
        with open(STOCK_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
        awd = ""
        for shop in data:
            if shop["shop"] == shop_name:
                for item in shop['items']:
                    awd += "  -  " + f"{item['emoji']}{item['name']}{item['emoji']} {item['amount']}\n"
        return awd if awd else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    except Exception as e:
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

def get_main_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    builder.button(text="üëÄ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–æ–∫–∏üëÄ")
    return builder.as_markup(resize_keyboard=True)

def get_stock_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üå±–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ —Å–µ–º—è–Ω.üå±")
    builder.button(text="üîß–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.üîß")
    builder.button(text="üìÖ–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ –∏–≤–µ–Ω—Ç–∞.üìÖ")
    builder.button(text="ü•ö–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ —è–∏—Ü.ü•ö")
    builder.button(text="üíÑ–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ —É–∫—Ä–∞—à–µ–Ω–∏–π.üíÑ")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_notify_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üçä–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ —Ñ—Ä—É–∫—Ç–∞ –¥—Ä–∞–∫–æ–Ω–∞.üêâ")
    builder.button(text="ü•≠–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –º–∞–Ω–≥–æ.ü•≠")
    builder.button(text="üçá–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞.üçá")
    builder.button(text="üçÑ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –≥—Ä–∏–±–æ–≤.üçÑ")
    builder.button(text="üå∂–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –ø–µ—Ä—Ü–∞.üå∂")
    builder.button(text="‚òï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –∫–∞–∫–∞–æ.‚òï")
    builder.button(text="ü•´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –±–æ–±–æ–≤.ü•´")
    builder.button(text="üå∫Ember lily.üî•")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_event_notify_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üçë–ù–µ–∫—Ç–∞—Ä–∏–Ωüçë")
    builder.button(text="üè†–§—Ä—É–∫—Ç —É–ª–µ–πüêù")
    builder.button(text="üçØ–ú–µ–¥–æ–≤—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—åüí¶")
    builder.button(text="üêùBee eggü•ö"),
    builder.button(text="üçØPollen Radarüìª"),
    builder.button(text="‚öïNectar StaffüçØ")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_gear_notify_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üöøGodly sprinklerüéá")
    builder.button(text="üöøMaster sprinkler‚öô")
    builder.button(text="‚ö°Lightning rod‚ö°")
    builder.button(text="üë´Friendship potüë´")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥")
    return builder.as_markup(resize_keyboard=True)

def get_notifies_keyboard() -> ReplyKeyboardBuilder:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üè™–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ Gear shop‚öô")
    builder.button(text="üìÖ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∏–≤–µ–Ω—Ç —Å—Ç–æ–∫üçØ")
    builder.button(text="üçá–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–∫ —Å–µ–º—è–Ωüè™")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥")
    builder.button(text="üßº–£–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤—Å—ë.üßº")
    return builder.as_markup(resize_keyboard=True)

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏ —è –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å —Å—Ç–æ–∫ —á–µ–≥–æ –ª–∏–±–æ –≤ –∏–≥—Ä–µ Grow a garden!"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())
    await state.set_state(UserStatment.just_started)

@router.message(StateFilter(UserStatment.just_started), F.text == "‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
async def handle_settings(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞ —á—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        reply_markup=get_notifies_keyboard()
    )
    await state.set_state(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event)

@router.message(StateFilter(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event), F.text == "üßº–£–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤—Å—ë.üßº")
async def handle_clear_notifs(message: types.Message, state: FSMContext):
    await clear_user_fruits(message.from_user.id)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.", reply_markup=get_notifies_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "üçä–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ —Ñ—Ä—É–∫—Ç–∞ –¥—Ä–∞–∫–æ–Ω–∞.üêâ")
async def handle_dragon(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Dragon Fruit")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä—É–∫—Ç –¥—Ä–∞–∫–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "ü•≠–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –º–∞–Ω–≥–æ.ü•≠")
async def handle_mango(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Mango")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –º–∞–Ω–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "üçá–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞.üçá")
async def handle_grape(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Grape")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "üçÑ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –≥—Ä–∏–±–æ–≤.üçÑ")
async def handle_mushroom(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Mushroom")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∏–± –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "üå∂–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –ø–µ—Ä—Ü–∞.üå∂")
async def handle_pepper(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Pepper")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "‚òï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –∫–∞–∫–∞–æ.‚òï")
async def handle_cacao(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Cacao")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∫–∞–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "ü•´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∫ –±–æ–±–æ–≤.ü•´")
async def handle_beanstalk(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Beanstalk")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –±–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "üå∫Ember lily.üî•")
async def handle_beanstalk(message: types.Message, state: FSMContext):
    await save_user_subscription(message.from_user.id, "Ember lily")
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Ember lily –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_notify_keyboard()) 

@router.message(StateFilter(UserStatment.just_started), F.text == "üëÄ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–æ–∫–∏üëÄ")
async def handle_view_stock(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Å—Ç–æ–∫ –ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=get_stock_keyboard())
    await state.set_state(UserStatment.waiting_for_what_stock_to_get)

@router.message(StateFilter(UserStatment.waiting_for_what_stock_to_get), F.text == "üå±–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ —Å–µ–º—è–Ω.üå±")
async def view_seed_stock(message: types.Message, state: FSMContext):
    text = await get_stock("SEEDS STOCK")
    await message.answer(text, reply_markup=get_stock_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_stock_to_get), F.text == "üîß–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.üîß")
async def view_gear_stock(message: types.Message, state: FSMContext):
    text = await get_stock("GEAR STOCK")
    await message.answer(text, reply_markup=get_stock_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_stock_to_get), F.text == "üìÖ–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ –∏–≤–µ–Ω—Ç–∞.üìÖ")
async def view_event_stock(message: types.Message, state: FSMContext):
    text = await get_stock("HONEY STOCK")
    await message.answer(text, reply_markup=get_stock_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_stock_to_get), F.text == "ü•ö–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ —è–∏—Ü.ü•ö")
async def view_egg_stock(message: types.Message, state: FSMContext):
    text = await get_stock("EGG STOCK")
    await message.answer(text, reply_markup=get_stock_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_stock_to_get), F.text == "üíÑ–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∫ —É–∫—Ä–∞—à–µ–Ω–∏–π.üíÑ")
async def view_cosmetic_stock(message: types.Message, state: FSMContext):
    text = await get_stock("COSMETICS STOCK")
    await message.answer(text, reply_markup=get_stock_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event), F.text == "üçá–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–∫ —Å–µ–º—è–Ωüè™")
async def set_seed_subscribe(message: types.Message, state: FSMContext):
    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–∫ —Å–µ–º—è–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏—Ö."
    await message.answer(text, reply_markup=get_notify_keyboard())
    await state.set_state(UserStatment.waiting_for_what_fruit_to_notify)

@router.message(StateFilter(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event), F.text == "üè™–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ Gear shop‚öô")
async def set_gear_subscribe(message: types.Message, state: FSMContext):
    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏—Ö."
    await message.answer(text, reply_markup=get_gear_notify_keyboard())
    await state.set_state(UserStatment.waiting_for_what_gear_to_notify)

@router.message(StateFilter(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event), F.text == "üìÖ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∏–≤–µ–Ω—Ç —Å—Ç–æ–∫üçØ")
async def set_event_subscribe(message: types.Message, state: FSMContext):
    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–∫ –∏–≤–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏—Ö."
    await message.answer(text, reply_markup=get_event_notify_keyboard())
    await state.set_state(UserStatment.waiting_for_what_event_item_to_notify)

@router.message(StateFilter(UserStatment.waiting_for_what_event_item_to_notify), F.text == "üçë–ù–µ–∫—Ç–∞—Ä–∏–Ωüçë")
async def set_nectarine_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –Ω–µ–∫—Ç–∞—Ä–∏–Ω."
    await save_user_subscription(message.from_user.id, "Nectarine")
    await message.answer(text, reply_markup=get_event_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_event_item_to_notify), F.text == "üè†–§—Ä—É–∫—Ç —É–ª–µ–πüêù")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —É–ª–µ–π."
    await save_user_subscription(message.from_user.id, "Hive")
    await message.answer(text, reply_markup=get_event_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_event_item_to_notify), F.text == "üçØ–ú–µ–¥–æ–≤—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—åüí¶")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –º–µ–¥–æ–≤—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å."
    await save_user_subscription(message.from_user.id, "Honey Sprinkler")
    await message.answer(text, reply_markup=get_event_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_event_item_to_notify), F.text == "üêùBee eggü•ö")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø—á–µ–ª–∏–Ω–æ–µ —è–π—Ü–æ."
    await save_user_subscription(message.from_user.id, "Bee Egg")
    await message.answer(text, reply_markup=get_event_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_event_item_to_notify), F.text == "üçØPollen Radarüìª")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Pollen Radar."
    await save_user_subscription(message.from_user.id, "Pollen Radar")
    await message.answer(text, reply_markup=get_event_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_event_item_to_notify), F.text == "‚öïNectar StaffüçØ")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Nectar Staff."
    await save_user_subscription(message.from_user.id, "Nectar Staff")
    await message.answer(text, reply_markup=get_event_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_gear_to_notify), F.text == "üöøGodly sprinklerüéá")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å."
    await save_user_subscription(message.from_user.id, "Godly Sprinkler")
    await message.answer(text, reply_markup=get_gear_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_gear_to_notify), F.text == "üöøMaster sprinkler‚öô")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –º–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å."
    await save_user_subscription(message.from_user.id, "Master Sprinkler")
    await message.answer(text, reply_markup=get_gear_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_gear_to_notify), F.text == "‚ö°Lightning rod‚ö°")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≥—Ä–æ–º–æ–æ—Ç–≤–æ–¥."
    await save_user_subscription(message.from_user.id, "Lightning Rod")
    await message.answer(text, reply_markup=get_gear_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_gear_to_notify), F.text == "üë´Friendship potüë´")
async def set_hive_subscribe(message: types.Message, state: FSMContext):
    text = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Friendship pot."
    await save_user_subscription(message.from_user.id, "Friendship pot")
    await message.answer(text, reply_markup=get_gear_notify_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_event_item_to_notify), F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.set_state(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", reply_markup=get_notifies_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_gear_to_notify), F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.set_state(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", reply_markup=get_notifies_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event), F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.set_state(UserStatment.just_started)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", reply_markup=get_main_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_fruit_to_notify), F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.set_state(UserStatment.waiting_for_what_to_subscribe_fruit_or_gear_or_event)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=get_notifies_keyboard())

@router.message(StateFilter(UserStatment.waiting_for_what_stock_to_get), F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.set_state(UserStatment.just_started)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())


async def main():
    dp.include_router(router)
    # –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(periodic_notify_task_regular(bot, interval=5))
    asyncio.create_task(periodic_notify_task_event(bot))
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
